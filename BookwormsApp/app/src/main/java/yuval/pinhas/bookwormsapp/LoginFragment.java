package yuval.pinhas.bookwormsapp;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.text.method.HideReturnsTransformationMethod;
import android.text.method.PasswordTransformationMethod;
import android.util.Patterns;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;
import androidx.fragment.app.Fragment;
import yuval.pinhas.bookwormsapp.databinding.FragmentLoginBinding;

/**
 * A fragment representing the login page of the Bookworms app.
 * Users can log in with their username and password, and have the option to reset their password if forgotten.
 *
 * @author Yuval Pinhas
 */
public class LoginFragment extends Fragment {

    /**
     * This class is generated by View Binding (a feature introduced in Android development to simplify the process of interacting with views in the layout files)
     * and holds references to views in the layout 'fragment_login.xml'.
     */
    private FragmentLoginBinding binding;

    /**
     * An instance of DatabaseHelper is used to interact with the local database.
     */
    private DatabaseHelper databaseHelper;

    /**
     * Inflates the layout for this fragment.
     *
     * @param inflater           The LayoutInflater object that can be used to inflate
     *                           any views in the fragment.
     * @param container          If non-null, this is the parent view that the fragment's
     *                           UI should be attached to. The fragment should not add the view itself,
     *                           but this can be used to generate the LayoutParams of the view.
     * @param savedInstanceState If non-null, this fragment is being re-constructed from a previous
     *                           saved state as given here.
     * @return The root View of the inflated layout.
     */
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        binding = FragmentLoginBinding.inflate(inflater, container, false);
        View rootView = binding.getRoot();

        databaseHelper = new DatabaseHelper(requireContext());

        // Show/hide password using eye icon
        ImageView imageViewShowHidePwd = rootView.findViewById(R.id.imageView_show_hide_pwd);
        imageViewShowHidePwd.setImageResource(R.drawable.ic_hide_pwd);
        imageViewShowHidePwd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (binding.loginPassword.getTransformationMethod().equals(HideReturnsTransformationMethod.getInstance())) {
                    // If the password is visible, then hide it
                    binding.loginPassword.setTransformationMethod(PasswordTransformationMethod.getInstance());
                    imageViewShowHidePwd.setImageResource(R.drawable.ic_hide_pwd);
                } else {
                    // Password is currently hidden, show it
                    binding.loginPassword.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
                    imageViewShowHidePwd.setImageResource(R.drawable.ic_show_pwd);
                }
            }
        });

        rootView.findViewById(R.id.forgot_pwd_redirect_text).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showForgotPasswordDialog();
            }
        });

        binding.loginButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String username = binding.loginUsername.getText().toString().trim();
                String password = binding.loginPassword.getText().toString().trim();
                if (username.isEmpty() || password.isEmpty()) {
                    Toast.makeText(getActivity(), "All fields are required!", Toast.LENGTH_SHORT).show();
                } else {
                    // Additional checks for username and password
                    if (!isValidUsername(username)) {
                        Toast.makeText(getActivity(), "Invalid username format!", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    if (!isValidPassword(password)) {
                        Toast.makeText(getActivity(), "Invalid password format!", Toast.LENGTH_SHORT).show();
                        return;
                    }

                    Boolean checkCredentials = databaseHelper.checkUsernamePassword(username, password);

                    /* If login succeeds */
                    if (checkCredentials) {
                        Toast.makeText(getActivity(), "Login Successful!", Toast.LENGTH_SHORT).show();
                        SharedPrefManager.getInstance(getActivity()).saveUsername(username); // Save the session
                        Intent intent = new Intent(getActivity(), UserActivity.class);
                        startActivity(intent);
                        getActivity().finish(); // Prevents going back to this activity after login
                    } else {
                        Toast.makeText(getActivity(), "Username or Password is incorrect!", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        });

        return rootView;
    }

    /**
     * Clears the view binding reference when the fragment's view is destroyed.
     */
    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

    /**
     * Method to show the forgot password dialog.
     */
    private void showForgotPasswordDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("Forgot Password");
        View viewInflated = LayoutInflater.from(getActivity()).inflate(R.layout.dialog_forgot_password, (ViewGroup) getView(), false);
        builder.setView(viewInflated);

        EditText usernameInput = viewInflated.findViewById(R.id.forgot_pwd_username);
        EditText idInput = viewInflated.findViewById(R.id.forgot_pwd_id);
        EditText emailInput = viewInflated.findViewById(R.id.forgot_pwd_email);

        builder.setPositiveButton("Submit", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String username = usernameInput.getText().toString().trim();
                String id = idInput.getText().toString().trim();
                String email = emailInput.getText().toString().trim();

                if (!username.isEmpty() && !id.isEmpty() && !email.isEmpty()) {
                    if (isValidUsername(username)) {
                        if (isValidId(id)) {
                            if (isValidEmail(email)) {
                                if (databaseHelper.checkUserExist(username, id, email)) {
                                    // If user exists, show password change dialog
                                    showChangePasswordDialog(username);
                                } else {
                                    Toast.makeText(getActivity(), "User does not exist! Please check your details.", Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                Toast.makeText(requireContext(), "Invalid Email Address!", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(requireContext(), "Invalid ID format!", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(requireContext(), "Invalid username format!", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(getActivity(), "All fields are required!", Toast.LENGTH_SHORT).show();
                }
            }
        });

        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });

        builder.show();
    }

    /**
     * Method to show the change password dialog.
     */
    private void showChangePasswordDialog(String username) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle("Change Password");
        View viewInflated = LayoutInflater.from(getActivity()).inflate(R.layout.dialog_change_password, (ViewGroup) getView(), false);
        builder.setView(viewInflated);

        EditText newPasswordInput = viewInflated.findViewById(R.id.new_password_editText);
        EditText confirmPasswordInput = viewInflated.findViewById(R.id.confirm_password_editText);

        builder.setPositiveButton("Change Password", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String newPassword = newPasswordInput.getText().toString().trim();
                String confirmPassword = confirmPasswordInput.getText().toString().trim();

                if (!newPassword.isEmpty() && !confirmPassword.isEmpty()) {
                    if (newPassword.equals(confirmPassword)) {
                        if (isValidPassword(newPassword)) {
                            // Update password in the database
                            boolean passwordChanged = databaseHelper.changePassword(username, newPassword);
                            if (passwordChanged) {
                                Toast.makeText(getActivity(), "Password changed successfully!", Toast.LENGTH_SHORT).show();
                            } else {
                                Toast.makeText(getActivity(), "Failed to change password! Please try again later.", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(getActivity(), "Invalid password format!", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(getActivity(), "Passwords do not match.", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(getActivity(), "All fields are required.", Toast.LENGTH_SHORT).show();
                }
            }
        });

        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });

        builder.show();
    }

    /**
     * Validates the format of the username.
     *
     * @param username The username to validate.
     * @return True if the username format is valid, false otherwise.
     */
    private boolean isValidUsername(String username) {
        // Username must start with a letter (a-z,A-Z) and can include up to one digit, the length must be 6-12.
        if (username.length() < 6 || username.length() > 12) {
            return false;
        }
        char firstChar = username.charAt(0);
        if (!(Character.isLetter(firstChar))) {
            return false;
        }
        int digitCount = 0;
        for (int i = 1; i < username.length(); i++) {
            char ch = username.charAt(i);
            if (!Character.isLetterOrDigit(ch)) {
                return false;
            }
            if (Character.isDigit(ch)) {
                digitCount++;
            }
        }
        return digitCount <= 1;
    }

    /**
     * Validates the format of the ID.
     *
     * @param id The ID to validate.
     * @return True if the ID format is valid, false otherwise.
     */
    private boolean isValidId(String id) {
        // must be exactly 9 digits, can be with leading 0's
        return id.length() == 9 && TextUtils.isDigitsOnly(id);
    }

    /**
     * Validates the format of the email address.
     *
     * @param email The email address to validate.
     * @return True if the email address format is valid, false otherwise.
     */
    private boolean isValidEmail(String email) {
        return Patterns.EMAIL_ADDRESS.matcher(email).matches();
    }

    /**
     * Validates the format of the password.
     *
     * @param password The password to validate.
     * @return True if the password format is valid, false otherwise.
     */
    private boolean isValidPassword(String password) {
        // Password must contain a capital letter (A-Z), a regular letter (a-z), special character (!,@, etc), the length must be 8-20.
        if (password.length() < 8 || password.length() > 20) {
            return false;
        }
        boolean hasUpperCase = false;
        boolean hasLowerCase = false;
        boolean hasSpecialChar = false;
        for (int i = 0; i < password.length(); i++) {
            char ch = password.charAt(i);
            if (Character.isUpperCase(ch)) {
                hasUpperCase = true;
            } else if (Character.isLowerCase(ch)) {
                hasLowerCase = true;
            } else if (!Character.isLetterOrDigit(ch)) {
                hasSpecialChar = true;
            }
        }
        return hasUpperCase && hasLowerCase && hasSpecialChar;
    }
}
